OBSERVER AUTOMATON AssumptionAutomaton

INITIAL STATE ARG0;

STATE __TRUE :
    TRUE -> ASSUME {true} GOTO __TRUE;

STATE __FALSE :
    TRUE -> ASSUME {false} GOTO __FALSE;

STATE USEFIRST ARG0 :
    MATCH "" -> ASSUME {true} GOTO ARG1;
    TRUE -> GOTO __TRUE;

STATE USEFIRST ARG1 :
    MATCH "int __VERIFIER_nondet_int();" -> GOTO ARG1M0;
    TRUE -> GOTO __TRUE;

STATE USEFIRST ARG1M0 :
    MATCH "int main()" -> GOTO ARG1M1;
    TRUE -> GOTO __TRUE;

STATE USEFIRST ARG1M1 :
    MATCH "" -> GOTO ARG1M2;
    TRUE -> GOTO __TRUE;

STATE USEFIRST ARG1M2 :
    MATCH "int x = __VERIFIER_nondet_int();" -> GOTO ARG1M3;
    TRUE -> GOTO __TRUE;

STATE USEFIRST ARG1M3 :
    MATCH "int x = __VERIFIER_nondet_int();" -> ASSUME {true} GOTO ARG2;
    TRUE -> GOTO __TRUE;

STATE USEFIRST ARG2 :
    MATCH "[(x * x) > 3]" -> ASSUME {true} GOTO ARG3;
    MATCH "[!((x * x) > 3)]" -> ASSUME {true} GOTO __TRUE;
    TRUE -> GOTO __TRUE;

STATE USEFIRST ARG3 :
    MATCH "x = x + 1;" -> GOTO ARG3M0;
    TRUE -> GOTO __TRUE;

STATE USEFIRST ARG3M0 :
    MATCH "x = x + 2;" -> GOTO ARG3M1;
    TRUE -> GOTO __TRUE;

STATE USEFIRST ARG3M1 :
    MATCH "x = x + 3;" -> GOTO ARG3M2;
    TRUE -> GOTO __TRUE;

STATE USEFIRST ARG3M2 :
    MATCH "x = x + 4;" -> ASSUME {true} GOTO ARG5;
    TRUE -> GOTO __TRUE;

STATE USEFIRST ARG5 :
    MATCH "L1:\n        x = 111;" -> ASSUME {true} GOTO __FALSE;
    TRUE -> GOTO __TRUE;

END AUTOMATON
