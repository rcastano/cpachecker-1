digraph CFA {
77 [shape="circle" label="N77\n22"]
86 [shape="circle" label="N86\n21"]
87 [shape="circle" label="N87\n20"]
88 [shape="circle" label="N88\n19"]
89 [shape="circle" label="N89\n18"]
90 [shape="circle" label="N90\n17"]
91 [shape="circle" label="N91\n16"]
92 [shape="circle" label="N92\n15"]
93 [shape="circle" label="N93\n14"]
94 [shape="circle" label="N94\n13"]
95 [shape="circle" label="N95\n12"]
96 [shape="circle" label="N96\n11"]
97 [shape="circle" label="N97\n10"]
98 [shape="circle" label="N98\n9"]
99 [shape="circle" label="N99\n8"]
78 [shape="circle" label="N78\n7"]
79 [shape="circle" label="N79\n6"]
80 [shape="diamond" label="N80\n5"]
81 [shape="circle" label="N81\n2"]
57 [shape="circle" label="N57\n19"]
58 [shape="circle" label="N58\n18"]
59 [shape="circle" label="N59\n17"]
60 [shape="circle" label="N60\n16"]
61 [shape="circle" label="N61\n15"]
62 [shape="doublecircle" label="N62\n14"]
64 [shape="circle" label="N64\n13"]
56 [shape="circle" label="N56\n12"]
84 [shape="circle" label="N84\n1"]
76 [shape="circle" label="N76\n0"]
63 [shape="circle" label="N63\n11"]
65 [shape="circle" label="N65\n10"]
66 [shape="diamond" label="N66\n9"]
69 [shape="circle" label="N69\n8"]
74 [shape="circle" label="N74\n7"]
40 [shape="circle" label="N40\n14"]
41 [shape="diamond" label="N41\n13"]
42 [shape="diamond" label="N42\n9"]
46 [shape="circle" label="N46\n8"]
49 [shape="circle" label="N49\n7"]
50 [shape="diamond" label="N50\n6"]
51 [shape="circle" label="N51\n3"]
54 [shape="circle" label="N54\n2"]
39 [shape="circle" label="N39\n0"]
75 [shape="circle" label="N75\n6"]
67 [shape="circle" label="N67\n0"]
52 [shape="circle" label="N52\n5"]
53 [shape="circle" label="N53\n4"]
47 [shape="circle" label="N47\n1"]
43 [shape="circle" label="N43\n12"]
9 [shape="circle" label="N9\n11"]
10 [shape="circle" label="N10\n10"]
11 [shape="circle" label="N11\n9"]
12 [shape="circle" label="N12\n8"]
13 [shape="circle" label="N13\n7"]
14 [shape="circle" label="N14\n6"]
15 [shape="doublecircle" label="N15\n5"]
18 [shape="circle" label="N18\n4"]
8 [shape="circle" label="N8\n3"]
26 [shape="circle" label="N26\n12"]
27 [shape="circle" label="N27\n11"]
24 [shape="diamond" label="N24\n10"]
28 [shape="diamond" label="N28\n9"]
33 [shape="circle" label="N33\n8"]
36 [shape="circle" label="N36\n7"]
37 [shape="circle" label="N37\n6"]
31 [shape="circle" label="N31\n2"]
20 [shape="circle" label="N20\n0"]
73 [shape="circle" label="N73\n1"]
32 [shape="circle" label="N32\n5"]
34 [shape="circle" label="N34\n4"]
35 [shape="circle" label="N35\n3"]
29 [shape="circle" label="N29\n1"]
44 [shape="circle" label="N44\n11"]
45 [shape="circle" label="N45\n10"]
17 [shape="circle" label="N17\n2"]
19 [shape="circle" label="N19\n1"]
16 [shape="circle" label="N16\n0"]
68 [shape="circle" label="N68\n5"]
70 [shape="circle" label="N70\n4"]
71 [shape="circle" label="N71\n3"]
72 [shape="circle" label="N72\n2"]
21 [shape="circle" label="N21\n16"]
22 [shape="circle" label="N22\n15"]
1 [shape="circle" label="N1\n6"]
2 [shape="diamond" label="N2\n5"]
3 [shape="circle" label="N3\n1"]
0 [shape="circle" label="N0\n0"]
23 [shape="diamond" label="N23\n14"]
25 [shape="circle" label="N25\n13"]
4 [shape="circle" label="N4\n4"]
5 [shape="circle" label="N5\n3"]
6 [shape="circle" label="N6\n2"]
82 [shape="circle" label="N82\n4"]
83 [shape="circle" label="N83\n3"]
node [shape="circle"]
subgraph cluster___VERIFIER_assert {
label="__VERIFIER_assert()"
1 -> 2 [label="Function start dummy edge"]
2 -> 4 [label="[cond == 0]"]
2 -> 3 [label="[!(cond == 0)]"]
3 -> 0 [label="return;"]
4 -> 5 [label="Label: ERROR"]
5 -> 6 [label="__VERIFIER_error();"]
6 -> 3 [label=""]}
subgraph cluster_harness {
label="harness()"
57 -> 58 [label="Function start dummy edge"]
58 -> 59 [label="count = 0;"]
59 -> 60 [label="int size_b = 20;"]
60 -> 61 [label="int b[size_b];"]
61 -> 62 [label="while"]
62 -> 63 [label="[total_pushed > 0]"]
62 -> 64 [label="[!(total_pushed > 0)]"]
64 -> 56 [label="default return"]
63 -> 65 [label="unsigned int op;"]
65 -> 66 [label="op = __VERIFIER_nondet_uint();"]
66 -> 68 [label="[op == 0]"]
66 -> 69 [label="[!(op == 0)]"]
69 -> 74 [label="int old_count = count;"]
74 -> 75 [label="pop(b);" style="dotted" arrowhead="empty"]
74 -> 75 [label="pop(b);"]
75 -> 67 [label=""]
67 -> 62 [label=""]
73 -> 67 [label=""]
68 -> 70 [label="int x;"]
70 -> 71 [label="x = __VERIFIER_nondet_uint();"]
71 -> 72 [label="total_pushed = total_pushed - 1;"]
72 -> 73 [label="push(x);" style="dotted" arrowhead="empty"]
72 -> 73 [label="push(x);"]}
subgraph cluster_init {
label="init()"
9 -> 10 [label="Function start dummy edge"]
10 -> 11 [label="int i;"]
11 -> 12 [label="start = 0;"]
12 -> 13 [label="count = 0;"]
13 -> 14 [label="for"]
14 -> 15 [label="i = 0;"]
15 -> 17 [label="[i < 1000]"]
15 -> 18 [label="[!(i < 1000)]"]
18 -> 8 [label="default return"]
17 -> 19 [label="circular_buffer[i] = 0;"]
19 -> 16 [label=""]
16 -> 15 [label="i = i + 1;"]}
subgraph cluster_main {
label="main()"
77 -> 86 [label="INIT GLOBAL VARS"]
86 -> 87 [label="void __VERIFIER_error();"]
87 -> 88 [label="unsigned int __VERIFIER_nondet_uint();"]
88 -> 89 [label="int __VERIFIER_nondet_int();"]
89 -> 90 [label="void __VERIFIER_assert(int cond);"]
90 -> 91 [label="int circular_buffer[1000] = {  };"]
91 -> 92 [label="int count = 0;"]
92 -> 93 [label="int start = 0;"]
93 -> 94 [label="int initialized = 0;"]
94 -> 95 [label="void init();"]
95 -> 96 [label="int push(int x);"]
96 -> 97 [label="int pop(int *a);"]
97 -> 98 [label="void harness(int total_pushed);"]
98 -> 99 [label="int main();"]
99 -> 78 [label="Function start dummy edge"]
78 -> 79 [label="int total_pushed;"]
79 -> 80 [label="total_pushed = __VERIFIER_nondet_int();"]
80 -> 82 [label="[total_pushed < 0]"]
80 -> 81 [label="[!(total_pushed < 0)]"]
81 -> 84 [label="harness(total_pushed);" style="dotted" arrowhead="empty"]
81 -> 84 [label="harness(total_pushed);"]
84 -> 76 [label="return 0;"]
82 -> 83 [label="total_pushed = -total_pushed;"]
83 -> 81 [label=""]}
subgraph cluster_pop {
label="pop()"
40 -> 41 [label="Function start dummy edge"]
41 -> 43 [label="[initialized == 0]"]
41 -> 42 [label="[!(initialized == 0)]"]
42 -> 47 [label="[count == 0]"]
42 -> 46 [label="[!(count == 0)]"]
46 -> 49 [label="*a = circular_buffer[start];"]
49 -> 50 [label="start = start + 1;"]
50 -> 52 [label="[start == 1000]"]
50 -> 51 [label="[!(start == 1000)]"]
51 -> 54 [label="count = count - 1;"]
54 -> 39 [label="return 1;"]
52 -> 53 [label="start = 0;"]
53 -> 51 [label=""]
47 -> 39 [label="return 0;"]
43 -> 44 [label="init();" style="dotted" arrowhead="empty"]
43 -> 44 [label="init();"]
44 -> 45 [label="initialized = 1;"]
45 -> 42 [label=""]}
subgraph cluster_push {
label="push()"
26 -> 27 [label="initialized = 1;"]
27 -> 24 [label=""]
24 -> 29 [label="[count == 1000]"]
24 -> 28 [label="[!(count == 1000)]"]
28 -> 32 [label="[(start + count) < 1000]"]
28 -> 33 [label="[!((start + count) < 1000)]"]
33 -> 36 [label="circular_buffer[(start + count) - 1000] = x;"]
36 -> 37 [label="count = count + 1;"]
37 -> 31 [label=""]
31 -> 20 [label="return 1;"]
32 -> 34 [label="circular_buffer[start + count] = x;"]
34 -> 35 [label="count = count + 1;"]
35 -> 31 [label=""]
29 -> 20 [label="return 0;"]
21 -> 22 [label="Function start dummy edge"]
22 -> 23 [label="__VERIFIER_assert((start + count) <= 2000);" style="dotted" arrowhead="empty"]
22 -> 23 [label="__VERIFIER_assert((start + count) <= 2000);"]
23 -> 25 [label="[initialized == 0]"]
23 -> 24 [label="[!(initialized == 0)]"]
25 -> 26 [label="init();" style="dotted" arrowhead="empty"]
25 -> 26 [label="init();"]}
81 -> 57 [label="harness(total_pushed)"]
56 -> 84 [label="Return edge from harness to main"]
74 -> 40 [label="pop(b)"]
39 -> 75 [label="Return edge from pop to harness"]
43 -> 9 [label="init()"]
8 -> 44 [label="Return edge from init to pop"]
8 -> 26 [label="Return edge from init to push"]
20 -> 73 [label="Return edge from push to harness"]
72 -> 21 [label="push(x)"]
22 -> 1 [label="__VERIFIER_assert((start + count) <= 2000)"]
0 -> 23 [label="Return edge from __VERIFIER_assert to push"]
25 -> 9 [label="init()"]}