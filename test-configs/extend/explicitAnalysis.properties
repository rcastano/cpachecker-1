# ------------------------------------------------------------------
# This configuration file uses explicit analysis of local integer
# variables in a model-checking configuration.
# Found errors are cross-checked by CBMC.
# An assumption is generated for all states which cannot be verified.
# ------------------------------------------------------------------

analysis.checkCounterexamples = true
analysis.stopAfterError = false

counterexample.continueAfterInfeasibleError = false

# ARTCPA is needed for counterexample analysis
cpa = cpa.arg.ARGCPA

# FunctionPointerCPA provides handling of function pointers
ARGCPA.cpa = cpa.composite.CompositeCPA

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.value.ValueAnalysisCPA, cpa.conditions.global.GlobalConditionsCPA

// includes/cex-check-predicateAnalysis.properties
// ******************
# ------------------------------------------------------------------------------
# Do a counterexample check using CPAchecker with bit-precise predicate analysis
# ------------------------------------------------------------------------------

# Check counterexamples.
analysis.checkCounterexamples = true

# use CPAchecker to analyse counterexamples
counterexample.checker = CPACHECKER
counterexample.checker.config = ../cex-checks/predicateAnalysis-as-bitprecise-cex-check.properties
// ******************
