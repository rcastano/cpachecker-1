# ----------------------------------------------------------------------
# This configuration file uses the Adjustable-Block Encoding CPA
# for predicate analysis with CEGAR as described in
# "Predicate Abstraction with Adjustable-Block Encoding" (Beyer et al.).
# It is configured for abstractions at loop heads, similar to LBE but
# with function inlining.
# This configuration works best on most examples,
# but may have memory problems on really big programs.
# ----------------------------------------------------------------------

#include includes/predicateAnalysis-ABEl.properties

# --------------------------------------------------------------------------
# This configures the Adjustable-Block Encoding CPA
# to use the classical refinement approach for predicate abstraction
# (BLAST-like).
# --------------------------------------------------------------------------

cegar.refiner = cpa.predicate.PredicateRefiner

# Guessing predicates statically from the CFA is a heuristic that pays off.
cpa.predicate.refinement.performInitialStaticRefinement = true

// Enable precise handling of structs.
cpa.predicate.handleFieldAccess = true

// includes/predicateAnalysis-bitprecise.properties
// *************************
// This file contains all the necessary options to make an existing PredicateCPA bitprecise.

// MathSAT is the only SMT solver that supports Bitvectors+Floats
solver.solver = MathSAT5

// Use bitvectors in formulas instead of real variables.
cpa.predicate.encodeBitvectorAs = BITVECTOR

// use floats in formulas instead of real variables.
cpa.predicate.encodeFloatAs = FLOAT

// Disable the counterexample checks the default config defines
analysis.checkCounterexamples = false
// *************************
