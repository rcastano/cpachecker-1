// predicateAnalysis-PredAbsRefiner-ABEl.properties
// ****************
# ----------------------------------------------------------------------
# This configuration file uses the Adjustable-Block Encoding CPA
# for predicate analysis with CEGAR as described in
# "Predicate Abstraction with Adjustable-Block Encoding" (Beyer et al.).
# It is configured for abstractions at loop heads, similar to LBE but
# with function inlining.
# This configuration works best on most examples,
# but may have memory problems on really big programs.
# ----------------------------------------------------------------------

// includes/predicateAnalysis-ABEl.properties
// *******
# ----------------------------------------------------------------------
# This configuration file uses the Adjustable-Block Encoding CPA
# for predicate analysis with CEGAR as described in
# "Predicate Abstraction with Adjustable-Block Encoding" (Beyer et al.).
# It is configured to support ABE with the largest loop-free blocks
# (abstractions only at loop heads).
# ----------------------------------------------------------------------

// predicateAnalysis-ABE.properties
// *************

# ----------------------------------------------------------------------
# This configuration file uses the Adjustable-Block Encoding CPA
# for predicate analysis with CEGAR as described in
# "Predicate Abstraction with Adjustable-Block Encoding" (Beyer et al.).
# It is configured to support ABE with large blocks.
# ----------------------------------------------------------------------

// predicateAnalysis.properties
// **************************
# ----------------------------------------------------------------------
# This configuration file uses the Adjustable-Block Encoding CPA
# for predicate analysis with CEGAR as described in
# "Predicate Abstraction with Adjustable-Block Encoding" (Beyer et.al.).
# ----------------------------------------------------------------------

analysis.algorithm.CEGAR = true

# ARGCPA is necessary for refinement and has to be the top-level CPA
cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.predicate.PredicateCPA

# this automaton defines which locations are the error locations
specification = ../specification/default.spc

# Enable MultiEdges, this gives a little bit of performance.
cfa.useMultiEdges = true

# Check counterexamples with value analysis
// cex-check-valueAnalysis.properties
// ****************
# --------------------------------------------------------------
# Do a counterexample check using CPAchecker with value analysis
# --------------------------------------------------------------

# Check counterexamples.
analysis.checkCounterexamples = true

# use CPAchecker to analyse counterexamples
counterexample.checker = CPACHECKER
counterexample.checker.config = ../cex-checks/valueAnalysis-as-cex-check.properties
// ****************

[cpa.predicate]
# Setting the option to make memory allocations always return correct addresses
memoryAllocationsAlwaysSucceed = true

# New heuristic for cillified files: pre-populate small structures with all their fields
maxPreFilledAllocationSize = 0

# reverse postorder (a more restrictive topological ordering) is better than dfs if elements may be merged
# callstack is necessary for ABE with blocks across function boundaries to work well
[analysis.traversal]
order = bfs
useReversePostorder = true
useCallstack = true
// **************************
// *************

cpa.predicate.blk.alwaysAtFunctions = false
cpa.predicate.blk.alwaysAtLoops     = true
// *******

// includes/predicateAnalysis-PredAbsRefiner.properties
// ********************************
# --------------------------------------------------------------------------
# This configures the Adjustable-Block Encoding CPA
# to use the classical refinement approach for predicate abstraction
# (BLAST-like).
# --------------------------------------------------------------------------

cegar.refiner = cpa.predicate.PredicateRefiner

# Guessing predicates statically from the CFA is a heuristic that pays off.
cpa.predicate.refinement.performInitialStaticRefinement = true
// ********************************
// ****************
