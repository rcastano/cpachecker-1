# ----------------------------------------------------------------------
# This configuration file uses the Adjustable-Block Encoding CPA
# for predicate analysis with CEGAR as described in
# "Predicate Abstraction with Adjustable-Block Encoding" (Beyer et al.).
# It is configured to support ABE with the largest loop-free blocks
# (abstractions only at loop heads).
# ----------------------------------------------------------------------

// predicateAnalysis-ABE.properties
// *************

# ----------------------------------------------------------------------
# This configuration file uses the Adjustable-Block Encoding CPA
# for predicate analysis with CEGAR as described in
# "Predicate Abstraction with Adjustable-Block Encoding" (Beyer et al.).
# It is configured to support ABE with large blocks.
# ----------------------------------------------------------------------

// predicateAnalysis.properties
// **************************
# ----------------------------------------------------------------------
# This configuration file uses the Adjustable-Block Encoding CPA
# for predicate analysis with CEGAR as described in
# "Predicate Abstraction with Adjustable-Block Encoding" (Beyer et.al.).
# ----------------------------------------------------------------------

analysis.algorithm.CEGAR = true

# ARGCPA is necessary for refinement and has to be the top-level CPA
cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.predicate.PredicateCPA

# this automaton defines which locations are the error locations
specification = ../specification/default.spc

# Enable MultiEdges, this gives a little bit of performance.
cfa.useMultiEdges = true

# Check counterexamples with value analysis
#include cex-check-valueAnalysis.properties

[cpa.predicate]
# Setting the option to make memory allocations always return correct addresses
memoryAllocationsAlwaysSucceed = true

# New heuristic for cillified files: pre-populate small structures with all their fields
maxPreFilledAllocationSize = 0

# reverse postorder (a more restrictive topological ordering) is better than dfs if elements may be merged
# callstack is necessary for ABE with blocks across function boundaries to work well
[analysis.traversal]
order = bfs
useReversePostorder = true
useCallstack = true
// **************************
// *************

cpa.predicate.blk.alwaysAtFunctions = false
cpa.predicate.blk.alwaysAtLoops     = true

